/* $Id$ */

/* TODO: this shouldn't exit(); implement panic mode instead */

%prefixes%

	terminal = lex_;
	function = p_;

%persistents%

	fsm :fsm;
	lex_state :lex_state;
	act_state :act_state;

%maps%

	string -> string;
	int    -> usint;
	state  -> state;

%header% @{

	#include <assert.h>
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>

	#include <fsm/fsm.h>

	#include "../libfsm/xalloc.h"

	#include "lexer.h"
	#include "parser.h"

	typedef unsigned int       usint;
	typedef char *             string;
	typedef struct fsm_state * state;

	struct act_state {
		int lex_tok;
		int lex_tok_save;
	};

	#define CURRENT_TERMINAL (act_state->lex_tok)
	#define ERROR_TERMINAL   lex_unknown
	#define ADVANCE_LEXER    do { act_state->lex_tok = lex_nexttoken(lex_state); } while (0)
	#define SAVE_LEXER(tok)  do { act_state->lex_tok_save = act_state->lex_tok;  \
	                              act_state->lex_tok = tok;                      } while (0)
	#define RESTORE_LEXER    do { act_state->lex_tok = act_state->lex_tok_save;  } while (0)

	static void err_expected(const char *token) {
		fprintf(stderr, "syntax error: expected %s\n", token);
		exit(EXIT_FAILURE);
	}

@}, @{

	typedef struct fsm *       fsm;
	typedef struct lex_state * lex_state;
	typedef struct act_state * act_state;

	/*
	 * Parse .fsm input from the given file stream. The fsm passed is expected to
	 * have been created by fsm_new(); it should not have any existing states.
	 * TODO: Have this create an fsm, instead
	 */
	struct fsm *
	fsm_parse(struct fsm *fsm, FILE *f);

@};

%terminals%

	id: () -> (i :int) = @{
		@i = atoi(lex_tokbuf(lex_state));
	@};

	label: () -> (s :string) = @{
		@s = xstrdup(lex_tokbuf(lex_state));
		if (@s == NULL) {
			perror("xstrdup");
			exit(EXIT_FAILURE);
		}
	@};

	literal: () -> (s :string) = @{
		@s = xstrdup(lex_tokbuf(lex_state));
		if (@s == NULL) {
			perror("xstrdup");
			exit(EXIT_FAILURE);
		}
	@};

%actions%

	<add-state>: (n :int) -> (s :state) = @{
		if (@n == 0) {
			fprintf(stderr, "special id 0 is reserved\n");
			@!;
		}

		@s = fsm_addstate(fsm, @n);

		if (@s == NULL) {
			perror("fsm_addstate");
			exit(EXIT_FAILURE);
		}
	@};

	<mark-start>: (n :int) -> () = @{
		struct fsm_state *state;

		state = fsm_getstatebyid(fsm, @n);
		if (state == NULL) {
			fprintf(stderr, "unrecognised start state: %u\n", @n);
			@!;
		}

		fsm_setstart(fsm, state);
	@};

	<mark-end>: (n :int) -> () = @{
		struct fsm_state *state;

		state = fsm_getstatebyid(fsm, @n);
		if (state == NULL) {
			fprintf(stderr, "unrecognised end state: %u\n", @n);
			@!;
		}

		fsm_setend(fsm, state, 1);
	@};

	<mark-colour>: (n :int, s :string) -> () = @{
		struct fsm_state *state;

		state = fsm_getstatebyid(fsm, @n);
		if (state == NULL) {
			fprintf(stderr, "unrecognised state: %u\n", @n);
			@!;
		}

		fsm_setopaque(fsm, state, @s);
	@};

	<add-edge-literal>: (x :state, y :state, s :string) -> () = @{
		assert(@s != NULL);

		/* TODO: convert to single char */
		if (strlen(@s) != 1) {
			fprintf(stderr, "literals must have exactly one character\n");
			@!;
		}

		if (!fsm_addedge_literal(fsm, @x, @y, @s[0])) {
			perror("fsm_addedge_literal");
			exit(EXIT_FAILURE);
		}
	@};

	<add-edge-epsilon>: (x :state, y :state) -> () = @{
		if (!fsm_addedge_epsilon(fsm, @x, @y)) {
			perror("fsm_addedge_epsilon");
			exit(EXIT_FAILURE);
		}
	@};

	<add-edge-any>: (x :state, y :state) -> () = @{
		if (!fsm_addedge_any(fsm, @x, @y)) {
			perror("fsm_addedge_any");
			exit(EXIT_FAILURE);
		}
	@};

	<free>: (s :string) -> () = @{
		free(@s);
	@};


	<err-parse> = @{
		fprintf(stderr, "parse error\n");
		exit(EXIT_FAILURE);
	@};

	<err-expected-sep> = @{
		err_expected("';'");
	@};

	<err-expected-trans> = @{
		err_expected("transition");
	@};

	<err-expected-comma> = @{
		err_expected("','");
	@};

	<err-expected-equals> = @{
		err_expected("'='");
	@};

	<err-expected-start> = @{
		err_expected("'start:'");
	@};

	<err-expected-end> = @{
		err_expected("'end:'");
	@};

%trailer% @{

	struct fsm *fsm_parse(struct fsm *fsm, FILE *f) {
		struct act_state act_state_s;
		struct act_state *act_state;
		struct lex_state *lex_state;

		assert(fsm != NULL);
		assert(f != NULL);

		/* TODO: perhaps create the fsm struct here, rather than passing one in */

		lex_state = lex_init(f);
		if (lex_state == NULL) {
			perror("lex_init");
			return NULL;
		}

		/* This is a workaround for ADVANCE_LEXER assuming a pointer */
		act_state = &act_state_s;

		ADVANCE_LEXER;
		p_fsm(fsm, lex_state, act_state);

		lex_free(lex_state);

		return fsm;
	}

@}, @{
@};

