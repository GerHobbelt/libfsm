/* $Id$ */

%types%

	char;
	string;
	state;

%terminals%

	IDENT: () -> (:string);

	LABEL;
	CHAR: () -> (:char);

	START;
	END;

	TO;
	ANY;
	SEP;
	COMMA;

	EOF;
	!UNKNOWN;

%productions%

	<label-char>:       (:char) -> ();
	<label-buffer>:     ()      -> (:string);

	<add-state>:        (:string) -> (:state);
	<mark-start>:       (:state)  -> ();
	<mark-end>:         (:state)  -> ();

	!<free>:            (:string) -> ();
	<free-statelist>;

	<add-edge-literal>: (:state, :state, :string) -> ();
	<add-edge-any>:     (:state, :state)          -> ();
	<add-edge-epsilon>: (:state, :state)          -> ();

	<err-expected-sep>;
	<err-expected-trans>;
	<err-expected-comma>;
	<err-expected-start>;
	<err-expected-end>;
	<err-parse>;


	label: () -> (n :string) [

		body = {
			c = CHAR;
			<label-char>(c);
			body;
		||
			$;
		};

	] = {
		body;
		LABEL;
		n = <label-buffer>;
	};

	id: () -> (n :string) = {
		n = IDENT;
	||
		n = label;
	};

	end-id = {
		n = id;

		s = <add-state>(n);

		<mark-end>(s);
	};

	end-ids = {
		end-id;
	||
		end-ids;
		{
			COMMA;
		##
			<err-expected-comma>;
		};
		end-id;
	};

	xend = {
		{
			END;
		##
			<err-expected-end>;
		};

		end-ids;

		{
			SEP;
		##
			<err-expected-sep>;
		};
	};

	xstart: () -> (n :string) = {
		{
			START;
		##
			<err-expected-start>;
		};

		n = id;

		{
			SEP;
		##
			<err-expected-sep>;
		};
	};

	edge = {
		a = id;
		TO;
		b = id;

		x = <add-state>(a);
		y = <add-state>(b);

		{
			s = label;
			<add-edge-literal>(x, y, s);
		||
			ANY;
			<add-edge-any>(x, y);
		||
			<add-edge-epsilon>(x, y);
		##
			<err-expected-trans>;
		};

		{
			SEP;
		##
			<err-expected-sep>;
		};
	};

	edges = {
		edges;
		edge;
	||
		edge;
	};

	fsm = {
		{
			edges;
		||
			$;
		};

		{
			n = xstart;
			s = <add-state>(n);
			<mark-start>(s);
		||
			$;
		};

		{
			xend;
		||
			$;
		};

		EOF;

		<free-statelist>;
	##
		<err-parse>;
	};

%entry%

	fsm;

