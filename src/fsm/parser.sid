/* $Id$ */

%types%

	char;
	string;
	state;

%terminals%

	IDENT: () -> (:string);

	ESC:  () -> (:char);
	OCT:  () -> (:char);
	HEX:  () -> (:char);
	CHAR: () -> (:char);
	LABEL;

	START;
	END;

	TO;
	ANY;
	SEP;
	COMMA;

	EOF;
	!UNKNOWN;

%productions%

	<add-state>:        (:string) -> (:state);
	<mark-start>:       (:state)  -> ();
	<mark-end>:         (:state)  -> ();

	<free>:             (:string) -> ();
	<free-statelist>;

	<add-edge-literal>: (:state, :state, :char) -> ();
	<add-edge-any>:     (:state, :state)        -> ();
	<add-edge-epsilon>: (:state, :state)        -> ();

	<err-expected-sep>;
	<err-expected-trans>;
	<err-expected-comma>;
	<err-expected-start>;
	<err-expected-end>;
	<err-syntax>;

	label: () -> (c :char) = {
		{
			c = ESC;
		||
			c = OCT;
		||
			c = HEX;
		||
			c = CHAR;
		};
		LABEL;
	};

	id: () -> (n :string) = {
		n = IDENT;
	};

	edges [

		edge = {
			a = id;
			TO;
			b = id;

			x = <add-state>(a);
			y = <add-state>(b);

			<free>(a);
			<free>(b);

			{
				c = label;
				<add-edge-literal>(x, y, c);
			||
				ANY;
				<add-edge-any>(x, y);
			||
				<add-edge-epsilon>(x, y);
			##
				<err-expected-trans>;
			};

			{
				SEP;
			##
				<err-expected-sep>;
			};
		};

	] = {
		edges;
		edge;
	||
		$;
	};

	xstart = {
		{
			START;
		##
			<err-expected-start>;
		};

		n = id;

		{
			SEP;
		##
			<err-expected-sep>;
		};

		s = <add-state>(n);
		<mark-start>(s);

		<free>(n);
	||
		$;
	};

	xend [

		end-id = {
			n = id;

			s = <add-state>(n);
			<mark-end>(s);

			<free>(n);
		};

		end-ids = {
			end-id;

			{
				{
					COMMA;
				##
					<err-expected-comma>;
				};

				end-ids;
			||
				$;
			};
		};

	] = {
		{
			END;
		##
			<err-expected-end>;
		};

		end-ids;

		{
			SEP;
		##
			<err-expected-sep>;
		};
	||
		$;
	};

	fsm = {
		edges;
		xstart;
		xend;

		EOF;

		<free-statelist>;
	##
		<err-syntax>;
	};

%entry%

	fsm;

