/* $Id$ */

/* TODO: this shouldn't exit(); implement panic mode instead */

%prefixes%

	terminal = lex_;
	function = p_;

%persistents%

	fsm :fsm;

%maps%

	string -> string;
	int    -> usint;
	state  -> state;

%header% @{

	#include <assert.h>
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>

	#include <fsm/fsm.h>

	#include "xalloc.h"
	#include "lexer.h"
	#include "parser.h"

	typedef unsigned int       usint;
	typedef char *             string;
	typedef struct fsm_state * state;

	int lex_tok;
	int lex_tok_save;

	#define CURRENT_TERMINAL lex_tok
	#define ERROR_TERMINAL   lex_unknown
	#define ADVANCE_LEXER    do { lex_tok = lex_nexttoken();             } while (0)
	#define SAVE_LEXER(tok)  do { lex_tok_save = lex_tok; lex_tok = tok; } while (0)
	#define RESTORE_LEXER    do { lex_tok = lex_tok_save;                } while (0)

	static void err_expected(const char *token) {
		fprintf(stderr, "syntax error: expected %s\n", token);
		exit(EXIT_FAILURE);
	}

@}, @{

	typedef struct fsm * fsm;

@};

%terminals%

	id: () -> (i :int) = @{
		@i = atoi(lex_tokbuf);
	@};

	label: () -> (s :string) = @{
		@s = xstrdup(lex_tokbuf);
		if (@s == NULL) {
			perror("xstrdup");
			exit(EXIT_FAILURE);
		}
	@};

%actions%

	<add-state>: (n :int) -> (s :state) = @{
		if (@n == 0) {
			fprintf(stderr, "special id 0 is reserved.\n");
			@!;
		}

		@s = fsm_addstate(fsm, @n);

		if (@s == NULL) {
			perror("fsm_addstate");
			exit(EXIT_FAILURE);
		}
	@};

	<mark-start>: (n :int) -> () = @{
		struct fsm_state *state;

		state = fsm_getstatebyid(fsm, @n);
		if (state == NULL) {
			fprintf(stderr, "unrecognised start state: %u\n", @n);
			@!;
		}

		fsm_setstart(fsm, state);
	@};

	<mark-end>: (n :int) -> () = @{
		struct fsm_state *state;

		state = fsm_getstatebyid(fsm, @n);
		if (state == NULL) {
			fprintf(stderr, "unrecognised end state: %u\n", @n);
			@!;
		}

		fsm_setend(fsm, state, 1);
	@};

	<add-edge>: (x :state, y :state, c :string) -> () = @{
		if (@c != NULL && strlen(@c) == 0) {
			fprintf(stderr, "empty label\n");
			@!;
		}

		if (fsm_addedge_label(fsm, @x, @y, @c) == NULL) {
			perror("fsm_addedge");
			exit(EXIT_FAILURE);
		}

		/* TODO: free label here? */
	@};

	<epsilon>: () -> (s :string) = @{
		@s = NULL;
	@};

	<free>: (s :string) -> () = @{
		free(@s);
	@};


	<err-parse> = @{
		fprintf(stderr, "parse error\n");
		exit(EXIT_FAILURE);
	@};

	<err-expected-sep> = @{
		err_expected("';'");
	@};

	<err-expected-comma> = @{
		err_expected("','");
	@};

	<err-expected-start> = @{
		err_expected("'start:'");
	@};

	<err-expected-end> = @{
		err_expected("'end:'");
	@};

%trailer% @{

	void fsm_parse(struct fsm *fsm, FILE *f) {
		assert(fsm != NULL);
		assert(f != NULL);

		lex_init(f);
		ADVANCE_LEXER;
		p_fsm(fsm);
	}

@}, @{
@};

