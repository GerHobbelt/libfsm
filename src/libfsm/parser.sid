/* $Id$ */

%types%

	int;
	string;
	state;

%terminals%

	id: () -> (:int);
	label: () -> (:string);
	literal: () -> (:string);
	any;

	start;
	end;

	arrow;

	sep;
	comma;

	eof;
	!unknown;

%productions%

	<add-state>: (:int) -> (:state);
	<mark-start>: (:int) -> ();
	<mark-end>: (:int) -> ();
	<add-edge-label>: (:state, :state, :string) -> ();
	<add-edge-literal>: (:state, :state, :string) -> ();
	<add-edge-any>: (:state, :state) -> ();
	<add-edge-epsilon>: (:state, :state) -> ();
	<free>: (:string) -> ();

	<err-expected-sep>;
	<err-expected-trans>;
	<err-expected-comma>;
	<err-expected-start>;
	<err-expected-end>;
	<err-parse>;


	ids = {
		n = id;
		<mark-end>(n);
	||
		ids;
		{
			comma;
		##
			<err-expected-comma>;
		};
		n = id;
		<mark-end>(n);
	};

	xend = {
		{
			end;
		##
			<err-expected-end>;
		};

		ids;

		{
			sep;
		##
			<err-expected-sep>;
		};
	};

	xstart: () -> (n :int) = {
		{
			start;
		##
			<err-expected-start>;
		};

		n = id;

		{
			sep;
		##
			<err-expected-sep>;
		};
	};

	edge = {
		a = id;
		arrow;
		b = id;

		x = <add-state>(a);
		y = <add-state>(b);

		{
			s = label;
			<add-edge-label>(x, y, s);
			<free>(s);
		||
			s = literal;
			<add-edge-literal>(x, y, s);
		||
			any;
			<add-edge-any>(x, y);
		||
			<add-edge-epsilon>(x, y);
		##
			<err-expected-trans>;
		};

		{
			sep;
		##
			<err-expected-sep>;
		};
	};

	edges = {
		edges;
		edge;
	||
		edge;
	};

	fsm = {
		edges;

		n = xstart;
		<mark-start>(n);

		{
			xend;
		||
			$;
		};

		eof;
	##
		<err-parse>;
	};

%entry%

	fsm;

