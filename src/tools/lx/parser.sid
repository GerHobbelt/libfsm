/* $Id$ */

%types%

	string;
	re;

%terminals%

	pattern_regex:   () -> (:string);
	pattern_literal: () -> (:string);

	map;
	to;
	semi;
	!alt;
	token_name: () -> (:string);

	open;
	close;

	!unknown;
	eof;

%productions%

	<compile-literal>: (:string) -> (:re);
	<compile-regex>:   (:string) -> (:re);

	<concat-regex>: (:re, :re) -> (:re);

	!<free>: (:string) -> ();

	<err-syntax>;
	!<err-expected-alt>;
	<err-expected-map>;
	<err-expected-semi>;
	<err-expected-to>;
	<err-expected-open>;
	<err-expected-close>;

	<err-expected-name>;
	<err-expected-list>;


	token-mapping [

		pattern: () -> (r :re) = {
			s = pattern_literal;
			r = <compile-literal>(s);
/*
			<free>(s);
*/
		||
			s = pattern_regex;
			r = <compile-regex>(s);
/*
			<free>(s);
*/
		};

		concaternated-patterns: () -> (r :re) = {
			r = pattern;
		||
			a = concaternated-patterns;
			b = pattern;
			r = <concat-regex>(a, b);
		};

/* TODO: I don't think I want these
		alternative-patterns = {
			concaternated-patterns;
		||
			alternative-patterns;

			{
				alt;
			##
				<err-expected-alt>;
			};

			concaternated-patterns;
		};
*/

	] = {
/*
		alternative-patterns;
*/
		r = concaternated-patterns;

		{
			$;
		||
			{
				map;
			##
				<err-expected-map>;
			};

			! = token_name;
		##
			<err-expected-name>;
		};
	};

	list-of-things [

		token-thing = {
			token-mapping;

			{
				semi;
			##
				<err-expected-semi>;
			};
		};

		zone-thing = {
			token-mapping;

			{
				to;
			##
				<err-expected-to>;
			};

			token-mapping;

			{
				{
					semi;
				##
					<err-expected-semi>;
				};
			||
				{
					open;
				##
					<err-expected-open>;
				};

				list-of-things;

				{
					close;
				##
					<err-expected-close>;
				};
			##
				<err-expected-list>;
			};
		};

		thing = {
			token-thing;
		||
			zone-thing;
		};

	] = {
		thing;
	||
		list-of-things;
		thing;
	##
		<err-expected-list>;
	};

	lx = {
		list-of-things;
		eof;
	##
		<err-syntax>;
	};

%entry%

	lx;

