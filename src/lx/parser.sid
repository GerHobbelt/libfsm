/* $Id$ */

%types%

	string;
	re;
	zone;
	ast;

%terminals%

	pattern_regex:   () -> (:string);
	pattern_literal: () -> (:string);

	map;
	to;
	semi;
	!alt;
	token_name: () -> (:string);

	open;
	close;

	!unknown;
	eof;

%productions%

	<compile-literal>: (:string) -> (:re);
	<compile-regex>:   (:string) -> (:re);

	<concat-regex>:     (:re, :re) -> (:re);
	<complement-regex>: (:re)      -> (:re);

	<make-ast>:     ()                                 -> (:ast);
	<make-zone>:    (:ast)                             -> (:zone);
	<make-mapping>: (:ast, :zone, :zone, :re, :string) -> ();

	<set-globalzone>: (:ast, :zone) -> ();

	<no-token>: () -> (:string);
	<no-to>:    () -> (:zone);	/* TODO: rename target? */

	!<free>: (:string) -> ();

	<err-syntax>;
	!<err-expected-alt>;
	<err-expected-map>;
	<err-expected-semi>;
	<err-expected-to>;
	<err-expected-open>;
	<err-expected-close>;
	<err-expected-eof>;

	<err-expected-list>;


	token-mapping: () -> (r :re, t :string) [

		pattern: () -> (r :re) = {
			s = pattern_literal;
			r = <compile-literal>(s);
		||
			s = pattern_regex;
			r = <compile-regex>(s);
		};

		concaternated-patterns: () -> (r :re) = {
			r = pattern;
		||
			a = concaternated-patterns;
			b = pattern;
			r = <concat-regex>(a, b);
		};

	] = {
		r = concaternated-patterns;

		{
			t = <no-token>;
		||
			{
				map;
			##
				<err-expected-map>;
			};

			t = token_name;
		};
	};

	list-of-things: (a :ast, z :zone) -> () [

		token-thing: (a :ast, z :zone) -> (r :re, t :string) = {
			(r, t) = token-mapping;

			{
				semi;
			##
				<err-expected-semi>;
			};
		};

		zone-thing: (a :ast, parent :zone) -> () = {
			(r1, t1) = token-mapping;

			{
				to;
			##
				<err-expected-to>;
			};

			(r2, t2) = token-mapping;

			child = <make-zone>(a);

			{
				{
					semi;
				##
					<err-expected-semi>;
				};

				/*
				 * This is an implicit zone, written: /r1/ .. /r2/;
				 * which is equivalent to: /r1/ .. /r2/ { /r2/v; }
				 * (i.e. discard everything which is not the exiting regexp.)
				 *
				 * If you want a zone where every character (other than the
				 * exiting regexp) is treated as an error, then explicitly
				 * specify an empty zone instead: /r1/ .. /r2/ { }
				 */

				x = <no-to>;
				y = <complement-regex>(r2);
				z = <no-token>;
				<make-mapping>(a, child, x, y, z);
			||
				{
					open;
				##
					<err-expected-open>;
				};

				list-of-things(a, child);

				{
					close;
				##
					<err-expected-close>;
				};
			##
				<err-expected-list>;
			};

			<make-mapping>(a, parent, child, r1, t1);
			<make-mapping>(a, child, parent, r2, t2);
		};

		thing: (a :ast, z :zone) -> () = {
			(r, t) = token-thing(a, z);
			to = <no-to>;
			<make-mapping>(a, z, to, r, t);
		||
			zone-thing(a, z);
		};

	] = {
		thing(a, z);
	||
		list-of-things(a, z);
		thing(a, z);
	##
		<err-expected-list>;
	};

	lx: () -> (a :ast) = {
		a = <make-ast>;
		z = <make-zone>(a);

		<set-globalzone>(a, z);

		list-of-things(a, z);

		{
			eof;
		##
			<err-expected-eof>;
		};
	##
		a = <make-ast>;

		<err-syntax>;
	};

%entry%

	lx;

