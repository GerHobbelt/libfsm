/* $Id$ */

%prefixes%

	terminal = TOK_;
	function = p_;
	type     = t_;

%persistents%

	fsm       :fsm;
	flags     :flags;
	lex_state :lex_state;
	act_state :act_state;

%maps%

%header% @{

	#include <assert.h>
	#include <limits.h>
	#include <string.h>
	#include <stdlib.h>
	#include <stdarg.h>
	#include <stdio.h>
	#include <errno.h>

	#include <fsm/fsm.h>

	#include <re/re.h>

	#ifndef FORM
	#error FORM required
	#endif

	#define PASTE(a, b) a ## b
	#define CAT(a, b)   PASTE(a, b)

	#define LX_PREFIX CAT(lx_, FORM)

	#define LX_TOKEN  CAT(LX_PREFIX, _token)
	#define LX_STATE  CAT(LX_PREFIX, _lx)
	#define LX_NEXT   CAT(LX_PREFIX, _next)
	#define LX_INIT   CAT(LX_PREFIX, _init)

	#define FORM_COMP CAT(comp_, FORM)

	/* XXX: get rid of this; use same %entry% for all grammars */
	#define FORM_ENTRY CAT(p_re__, FORM)

	#include "parser.h"
	#include "lexer.h"

	#include "../comp.h"

	typedef char     t_char;
	typedef unsigned t_unsigned;
	typedef char *   t_grp;
	typedef unsigned t_pred; /* TODO */

	typedef struct fsm_state * t_fsm__state;

	struct act_state {
		enum LX_TOKEN lex_tok;
		enum LX_TOKEN lex_tok_save;
		enum re_errno e;
	};

	struct lex_state {
		struct LX_STATE lx;
		struct lx_dynbuf buf; /* XXX: unneccessary since we're lexing from a string */

		int (*f)(void *opaque);
		void *opaque;

		/* TODO: use lx's generated conveniences for the pattern buffer */
		char a[512];
		char *p;
	};

	#define CURRENT_TERMINAL (act_state->lex_tok)
	#define ERROR_TERMINAL   @$ERROR
	#define ADVANCE_LEXER    do { act_state->lex_tok = LX_NEXT(&lex_state->lx); } while (0)
	#define SAVE_LEXER(tok)  do { act_state->lex_tok_save = act_state->lex_tok; \
	                              act_state->lex_tok = tok;                     } while (0)
	#define RESTORE_LEXER    do { act_state->lex_tok = act_state->lex_tok_save; } while (0)

	static void
	err(const struct lex_state *lex_state, const char *fmt, ...)
	{
		va_list ap;

		assert(lex_state != NULL);

		va_start(ap, fmt);
		fprintf(stderr, "%u:%u: ",
			lex_state->lx.start.line, lex_state->lx.start.col);
		vfprintf(stderr, fmt, ap);
		fprintf(stderr, "\n");
		va_end(ap);
	}

	/* TODO: centralise */
	/* XXX: escaping really depends on dialect */
	static const char *
	escchar(char *s, size_t sz, int c)
	{
		size_t i;

		const struct {
			int c;
			const char *s;
		} a[] = {
			{ '\\', "\\\\" },

			{ '^',  "\\^"  },
			{ '-',  "\\-"  },
			{ ']',  "\\]"  },
			{ '[',  "\\["  },

			{ '\f', "\\f"  },
			{ '\n', "\\n"  },
			{ '\r', "\\r"  },
			{ '\t', "\\t"  },
			{ '\v', "\\v"  }
		};

		assert(s != NULL);
		assert(sz >= 5);

		(void) sz;

		for (i = 0; i < sizeof a / sizeof *a; i++) {
			if (a[i].c == c) {
				return a[i].s;
			}
		}

		if (!isprint((unsigned char) c)) {
			sprintf(s, "\\x%02X", (unsigned char) c);
			return s;
		}

		sprintf(s, "%c", c);
		return s;
	}

@}, @{

	#include <re/re.h>

	typedef struct lex_state * lex_state;
	typedef struct act_state * act_state;

	typedef struct fsm *  fsm;
	typedef enum re_flags flags;

@};

%terminals%

	INVERT: () -> (c :char) = @{
		@c = '^';
	@};

	RANGE: () -> (c :char) = @{
		@c = '-';
	@};

	CLOSEGROUP: () -> (c :char) = @{
		@c = ']';
	@};

	ESC: () -> (c :char) = @{
		assert(lex_state->buf.a[0] == '\\');
		assert(lex_state->buf.a[1] != '\0');
		assert(lex_state->buf.a[2] == '\0');

		@c = lex_state->buf.a[1];

		switch (@c) {
		case 'f': @c = '\f'; break;
		case 'n': @c = '\n'; break;
		case 'r': @c = '\r'; break;
		case 't': @c = '\t'; break;
		case 'v': @c = '\v'; break;
		default:             break;
		}
	@};

	OCT: () -> (c :char) = @{
		unsigned long u;
		char *e;

		assert(0 == strncmp(lex_state->buf.a, "\\", 1));
		assert(strlen(lex_state->buf.a) >= 2);

		errno = 0;

		u = strtoul(lex_state->buf.a + 1, &e, 8);
		assert(*e == '\0');

		if (u > UCHAR_MAX || (u == ULONG_MAX && errno == ERANGE)) {
			err(lex_state, "octal escape %s out of range: expected \\0..\\%o inclusive",
				lex_state->buf.a, UCHAR_MAX);
			exit(EXIT_FAILURE);
		}

		if (u == ULONG_MAX && errno != 0) {
			err(lex_state, "%s: %s: expected \\0..\\%o inclusive",
				lex_state->buf.a, strerror(errno), UCHAR_MAX);
			exit(EXIT_FAILURE);
		}

		@c = (unsigned char) u;
	@};

	HEX: () -> (c :char) = @{
		unsigned long u;
		char *e;

		assert(0 == strncmp(lex_state->buf.a, "\\x", 2));
		assert(strlen(lex_state->buf.a) >= 3);

		errno = 0;

		u = strtoul(lex_state->buf.a + 2, &e, 16);
		assert(*e == '\0');

		if (u > UCHAR_MAX || (u == ULONG_MAX && errno == ERANGE)) {
			err(lex_state, "hex escape %s out of range: expected \\x0..\\x%x inclusive",
				lex_state->buf.a, UCHAR_MAX);
			exit(EXIT_FAILURE);
		}

		if (u == ULONG_MAX && errno != 0) {
			err(lex_state, "%s: %s: expected \\x0..\\x%x inclusive",
				lex_state->buf.a, strerror(errno), UCHAR_MAX);
			exit(EXIT_FAILURE);
		}

		@c = (unsigned char) u;
	@};

	CHAR: () -> (c :char) = @{
		assert(lex_state->buf.a[0] != '\0');
		assert(lex_state->buf.a[1] == '\0');

		@c = lex_state->buf.a[0];
	@};

	START: () -> (p :pred) = @{
		switch (flags & RE_ANCHOR) {
		case RE_TEXT:  @p = RE_SOT; break;
		case RE_MULTI: @p = RE_SOL; break;
		case RE_ZONE:  @p = RE_SOZ; break;

		default:
			/* TODO: raise error */
			@p = 0U;
		}
	@};

	END: () -> (p :pred) = @{
		switch (flags & RE_ANCHOR) {
		case RE_TEXT:  @p = RE_EOT; break;
		case RE_MULTI: @p = RE_EOL; break;
		case RE_ZONE:  @p = RE_EOZ; break;

		default:
			/* TODO: raise error */
			@p = 0U;
		}
	@};

	COUNT: () -> (n :unsigned) = @{
		@n = strtoul(lex_state->buf.a, NULL, 10);
		/* TODO: range check */
	@};

%actions%

	/*
	 * These are parser actions common to all grammars provided by libre.
	 * Globs use only a few of the available actions; regexps use most.
	 *
	 * In some cases (e.g. counting) actions are centralised here for
	 * the sake of DRY, at the expense of slight overkill.
	 */

	<make-states>: () -> (x :fsm_state, y :fsm_state) = @{
		assert(fsm != NULL);
		/* TODO: assert fsm is empty */

		@x = fsm_getstart(fsm);
		assert(@x != NULL);

		@y = fsm_addstate(fsm);
		if (@y == NULL) {
			@!;
		}

		fsm_setend(fsm, @y, 1);
	@};


	<make-group>: () -> (g :grp) = @{
		@g = calloc(UCHAR_MAX + 1, sizeof *@g);
		if (@g == NULL) {
			@!;
		}
	@};

	<free-group>: (g :grp) -> () = @{
		assert(@g != NULL);

		free(@g);
	@};

	<invert-group>: (g :grp) -> () = @{
		int i;

		assert(@g != NULL);

		for (i = 0; i <= UCHAR_MAX; i++) {
			@g[i] = !@g[i];
		}
	@};

	<group-add-char>: (g :grp, c :char) -> () = @{
		assert(@g != NULL);

		@g[(unsigned char) @c] = 1;
	@};

	<group-add-range>: (g :grp, a :char, b :char) -> () = @{
		int i;

		assert(@g != NULL);

		if (@b < @a) {
			char a[5], b[5];

			err(lex_state, "negative range [%s-%s]",
				escchar(a, sizeof a, @a), escchar(b, sizeof b, @b));
			exit(EXIT_FAILURE);
		}

		for (i = (unsigned char) @a; i <= (unsigned char) @b; i++) {
			@g[i] = 1;
		}
	@};

	<group-to-states>: (g :grp, x :fsm_state, y :fsm_state) -> () = @{
		int i;

		assert(@g != NULL);

		/* TODO: eventually libfsm will provide a neater mechanism here */
		for (i = 0; i <= UCHAR_MAX; i++) {
			if (!@g[i]) {
				continue;
			}

			if (!fsm_addedge_literal(fsm, @x, @y, (char) i)) {
				@!;
			}
		}
	@};


	/*
	 * The following regular expression fragments map to associated fsm states
	 * as follows (transitions written in .fsm format):
	 *
	 *  ab    add-concat:  1 -> 3 "a"; 3 -> 2 "b";
	 *  a|b   add-alt:     1 -> 2 "a"; 1 -> 2 "b";
	 *  (a)   add-sub:     1 -> 1a; 2a -> 2;
	 *  [abc] add-group:   1 -> 2 "a"; 1 -> 2 "b"; 1 -> 2 "c";
	 *  a     add-literal: 1 -> 1a; 2a -> 2;
	 *  .     add-any:     1 -> 2 ?;
	 *
	 * Each of these component parts has exactly one input (1) and exactly one
	 * output state (2).
	 * TODO: say that these correspond to "x" and "y"
	 * TODO: explain that these are stacklike
	 * TODO: update these comments
	 */

	<add-concat>: () -> (s :fsm_state) = @{
		@s = fsm_addstate(fsm);
		if (@s == NULL) {
			@!;
		}
	@};

	<add-epsilon>: (x :fsm_state, y: fsm_state) -> () = @{
		if (!fsm_addedge_epsilon(fsm, @x, @y)) {
			@!;
		}
	@};

	<add-pred>: (x :fsm_state, y :fsm_state, p :pred) -> () = @{
		assert(@x != NULL);
		assert(@y != NULL);

/* TODO:
		if (!fsm_addedge_predicate(fsm, @x, @y, @p)) {
			@!;
		}
*/
	@};

	<add-literal>: (x :fsm_state, y :fsm_state, c :char) -> () = @{
		assert(@x != NULL);
		assert(@y != NULL);

		/* TODO: check c is legal? */

		if (!fsm_addedge_literal(fsm, @x, @y, @c)) {
			@!;
		}
	@};

	<add-any>: (x :fsm_state, y :fsm_state) -> () = @{
		assert(@x != NULL);
		assert(@y != NULL);

		if (!fsm_addedge_any(fsm, @x, @y)) {
			@!;
		}
	@};


	/*
	 * The following count repetition operators encapsulate regular expression
	 * fragments as follows (transitions written in .fsm format where 1a and 2a
	 * indicate the a'th occurance of the input and output states 1 and 2 from
	 * the fragment):
	 *
	 *  a{n} count-n:         8 -> 1a; 2a -> 1b; 2b -> ...a; ...b -> na; nb -> 9;
	 *  a?   count-0-or-1:    8 -> 1a; 2a -> 9; 8 -> 9;
	 *  a*   count-0-or-many: 8 -> 1a; 2a -> 9; 8 -> 9; 9 -> 8;
	 *  a+   count-1-or-many: 8 -> 1a; 2a -> 9;         9 -> 8;
	 *  a    count-1:         8 -> 1a; 2a -> 9;
	 *
	 * Each of these component parts has exactly one input (8) and exactly one
	 * output state (9). Between these states are an appropiate number of
	 * regex fragments as per <add-*> which begin and end (1) and (2). Each of
	 * these pairs is lettered a, b, ..., n for ease of identification.
	 *
	 * TODO: update for count-m-n
	 */

	<count-m-to-n>: (x :fsm_state, y :fsm_state &, m :unsigned, n :unsigned) -> () = @{
		unsigned i;
		struct fsm_state *a;
		struct fsm_state *b;

		if (@m == 0) {
			@!;
		}

		if (@n < @m) {
			@!;
		}

		b = @y;

		for (i = 1; i < @n; i++) {
			a = fsm_state_duplicatesubgraphx(fsm, @x, &b);
			if (a == NULL) {
				@!;
			}

			/* TODO: could elide this epsilon if fsm_state_duplicatesubgraphx()
			 * took an extra parameter giving it a m->new for the start state */
			if (!fsm_addedge_epsilon(fsm, @y, a)) {
				@!;
			}

			if (i >= @m) {
				if (!fsm_addedge_epsilon(fsm, @y, b)) {
					@!;
				}
			}

			@=y = b;
			@x = a;
		}
	@};

	<count-0-or-1>: (x :fsm_state, y :fsm_state) -> () = @{
		if (!fsm_addedge_epsilon(fsm, @x, @y)) {
			@!;
		}
	@};

	<count-0-or-many>: (x :fsm_state, y :fsm_state &) -> () = @{
		if (!fsm_addedge_epsilon(fsm, @x, @y)) {
			@!;
		}

		if (!fsm_addedge_epsilon(fsm, @y, @x)) {
			@!;
		}

		/* isolation guard */
		/* TODO: centralise */
		{
			struct fsm_state *z;

			z = fsm_addstate(fsm);
			if (z == NULL) {
				@!;
			}

			if (!fsm_addedge_epsilon(fsm, @y, z)) {
				@!;
			}

			@=y = z;
		}
	@};

	<count-1-or-many>: (x :fsm_state, y :fsm_state &) -> () = @{
		if (!fsm_addedge_epsilon(fsm, @y, @x)) {
			@!;
		}

		/* isolation guard */
		/* TODO: centralise */
		{
			struct fsm_state *z;

			z = fsm_addstate(fsm);
			if (z == NULL) {
				@!;
			}

			if (!fsm_addedge_epsilon(fsm, @y, z)) {
				@!;
			}

			@=y = z;
		}
	@};

	<count-1>: (x :fsm_state, y :fsm_state) -> () = @{
		(void) @x;
		(void) @y;
	@};


	<err-expected-term> = @{
		act_state->e = RE_EXTERM;
	@};

	<err-expected-count> = @{
		act_state->e = RE_EXCOUNT;
	@};

	<err-expected-atoms> = @{
		act_state->e = RE_EXATOMS;
	@};

	<err-expected-alts> = @{
		act_state->e = RE_EXALTS;
	@};

	<err-expected-range> = @{
		act_state->e = RE_EXRANGE;
	@};

	<err-expected-eof> = @{
		act_state->e = RE_EXEOF;
	@};

%trailer% @{

	static int
	lgetc(struct LX_STATE *lx)
	{
		const struct lex_state *lex_state;

		assert(lx != NULL);
		assert(lx->opaque != NULL);

		lex_state = lx->opaque;

		assert(lex_state->f != NULL);

		return lex_state->f(lex_state->opaque);
	}

	struct fsm *
	FORM_COMP(int (*f)(void *opaque), void *opaque,
		enum re_flags flags, struct re_err *err)
	{
		struct act_state  act_state_s;
		struct act_state *act_state;
		struct lex_state  lex_state_s;
		struct lex_state *lex_state;

		struct LX_STATE *lx;
		struct fsm *new;
		enum re_errno e;

		assert(f != NULL);

		new = re_new_empty();
		if (new == NULL) {
			e = RE_EERRNO;
			goto error;
		}

		lex_state    = &lex_state_s;
		lex_state->p = lex_state->a;

		lx = &lex_state->lx;

		LX_INIT(lx);

		lx->lgetc  = lgetc;
		lx->opaque = lex_state;

		lex_state->f       = f;
		lex_state->opaque  = opaque;

		lex_state->buf.a   = NULL;
		lex_state->buf.len = 0;

		/* XXX: unneccessary since we're lexing from a string */
		lx->buf   = &lex_state->buf;
		lx->push  = CAT(LX_PREFIX, _dynpush);
		lx->pop   = CAT(LX_PREFIX, _dynpop);
		lx->clear = CAT(LX_PREFIX, _dynclear);
		lx->free  = CAT(LX_PREFIX, _dynfree);

	/* XXX */
	lx->free = NULL;

		/* This is a workaround for ADVANCE_LEXER assuming a pointer */
		act_state = &act_state_s;

		act_state->e = RE_ESUCCESS;

		ADVANCE_LEXER;
		FORM_ENTRY(new, flags, lex_state, act_state);

		if (act_state->e != RE_ESUCCESS) {
			/* TODO: free internals allocated during parsing (are there any?) */
			fsm_free(new);
			e = act_state->e;
			goto error;
		}

		return new;

	error:

		if (err != NULL) {
			err->e    = e;
			err->byte = lx->start.byte;
		}

		return NULL;
	}

@}, @{

@};

