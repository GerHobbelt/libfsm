/*
 * Copyright 2008-2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

%types%

	pos;
	char;
	!unsigned;
	!re_flags;
	!err;
	ast_expr;
	ast_count;
	!atom_count_flag;
	!ast_class_id;
	!ast_class;
	!range_endpoint;

%terminals%

	ANY;
	MANY;
	!OPT;
	!PLUS;
	!ALT;
	!SEP;
	!STAR;

	!START;
	!END;

	!OPENSUB;   !CLOSESUB;
	!OPENGROUP: () -> (:pos, :pos); !CLOSEGROUP: () -> (:char, :pos, :pos);
	!OPENCOUNT: () -> (:pos, :pos); !CLOSECOUNT: () -> (:pos, :pos);

	!INVERT: () -> (:char);
	!RANGE:  () -> (:char, :pos, :pos);

	!NAMED_CLASS: () -> (:ast_class_id, :pos, :pos);

	!OPENFLAGS;
	!CLOSEFLAGS;
	!NEGATE;
	!FLAG_UNKNOWN;
	!FLAG_INSENSITIVE: () -> (:re_flags);

	!ESC:     () -> (:char, :pos, :pos);
	!CONTROL: () -> (:char, :pos, :pos);
	!NOESC:   () -> (:char, :pos, :pos);
	!OCT:     () -> (:char, :pos, :pos);
	!HEX:     () -> (:char, :pos, :pos);
	CHAR:     () -> (:char, :pos, :pos);
	!COUNT:   () -> (:unsigned);

	EOF;
	!ERROR;

%productions%

	<ast-expr-empty>: () -> (:ast_expr);
	<ast-expr-literal>: (:char) -> (:ast_expr);
	<ast-expr-concat>: (:ast_expr, :ast_expr) -> (:ast_expr);
	!<ast-expr-alt>: (:ast_expr, :ast_expr) -> (:ast_expr);
	<ast-expr-any>: () -> (:ast_expr);

        <ast-expr-atom>: (:ast_expr, :ast_count) -> (:ast_expr);
        !<ast-expr-atom-any>: (:ast_count) -> (:ast_expr);
	!<ast-expr-class>: (:ast_class, :pos, :pos) -> (:ast_expr);
        !<ast-expr-group>: (:ast_expr) -> (:ast_expr);
	!<ast-expr-re-flags>: (:re_flags, :re_flags) -> (:ast_expr);
	!<ast-expr-anchor-start>: () -> (:ast_expr);
	!<ast-expr-anchor-end>: () -> (:ast_expr);

        <atom-kleene>: () -> (:ast_count);
        !<atom-plus>: () -> (:ast_count);
        !<atom-one>: () -> (:ast_count);
        !<atom-opt>: () -> (:ast_count);

        !<expr-count>: (:unsigned, :pos, :unsigned, :pos) -> (:ast_count);

	!<ast-class-literal>: (:char) -> (:ast_class);
	!<ast-class-range-distinct>: (:range_endpoint, :pos, :range_endpoint, :pos) -> ();
        !<ast-class-range>: (:range_endpoint, :pos, :range_endpoint, :pos) -> (:ast_class);
	!<ast-class-concat>: (:ast_class, :ast_class) -> (:ast_class);
	!<ast-class-subtract>: (:ast_class, :ast_class) -> (:ast_class);
	!<ast-class-named-class>: (:ast_class_id) -> (:ast_class);

	!<ast-range-endpoint-literal>: (:char) -> (:range_endpoint);
	!<ast-range-endpoint-class>: (:ast_class_id) -> (:range_endpoint);

	!<re-flag-none>: () -> (:re_flags);
	!<re-flag-union>: (:re_flags, :re_flags) -> (:re_flags);

	!<err-expected-term>;
	!<err-expected-count>;
	!<err-expected-atoms>;
	!<err-expected-alts>;
	!<err-expected-range>;
	!<err-expected-closegroup>;
	!<err-unknown-flag>;
	!<err-expected-closeflags>;
	!<err-expected-groupbody>;
	<err-expected-eof>;
	!<err-unsupported>;

	!<ast-class-flag-none>: () -> (:ast_class);
	!<ast-class-flag-invert>: () -> (:ast_class);
	!<ast-class-flag-minus>: () -> (:ast_class);
	!<ast-class-flag-invert-minus>: () -> (:ast_class);

	!<mark-group>: (:pos, :pos) -> ();
	!<mark-range>: (:pos, :pos) -> ();
	!<mark-count>: (:pos, :pos) -> ();

	list-of-nodes: () -> (node :ast_expr) [
		literal: () -> (c :char) = {
			(c, !, !) = CHAR;
		};

		any: () -> () = {
			ANY;
		};

		many: () -> () = {
			MANY;
		};
	] = {
		{
			c = literal();
			l = <ast-expr-literal>(c);
		||
			any();
			l = <ast-expr-any>();
		||
			many();
			e = <ast-expr-any>();
			c = <atom-kleene>();
			l = <ast-expr-atom>(e, c);
		};

		{
			r = list-of-nodes();
			node = <ast-expr-concat>(l, r);
		||
			r = <ast-expr-empty>;
			node = <ast-expr-concat>(l, r);
		};
	};

	re_like: () -> (node :ast_expr) = {
		{
			node = list-of-nodes();
		||
			node = <ast-expr-empty>();
		};

		{
			EOF;
		##
			<err-expected-eof>;
		};
	};

%entry%

	re_like;

