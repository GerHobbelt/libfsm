/*
 * Copyright 2008-2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

/*
 * ISO/IEC 9075-2:1999 (E) Â©ISO/IEC
 * 8.6 <similar predicate>
 *
 * https://firebirdsql.org/refdocs/langrefupd25-similar-to.html
 *
 * TODO: SQL99 permits an arbitrary optional escape character
 */

%types%

	pos;
	char;
	unsigned;
	!re_flags;
	!err;
	ast_expr;
	ast_count;
	ast_class_id;
	ast_class;
	range_endpoint;

%terminals%

	ANY;
	MANY;
	OPT;
	PLUS;
	ALT;
	STAR;

	!START;
	!END;

	OPENSUB;   CLOSESUB;
	OPENGROUP:  () -> (:pos, :pos); CLOSEGROUP:  () -> (:char, :pos, :pos);
	OPENCOUNT: () -> (:pos, :pos);
	COUNT: () -> (:unsigned);
	SEP;
	CLOSECOUNT: () -> (:pos, :pos);

	INVERT: () -> (:char);
	RANGE:  () -> (:char, :pos, :pos);

	NAMED_CHAR_CLASS: () -> (:ast_class_id, :pos, :pos);

	!OPENFLAGS;
	!CLOSEFLAGS;
	!NEGATE;
	!FLAG_UNKNOWN;
	!FLAG_INSENSITIVE: () -> (:re_flags);

	!ESC:     () -> (:char, :pos, :pos);
	!CONTROL: () -> (:char, :pos, :pos);
	!NOESC:   () -> (:char, :pos, :pos);
	!OCT:     () -> (:char, :pos, :pos);
	!HEX:     () -> (:char, :pos, :pos);
	CHAR:     () -> (:char, :pos, :pos);

	EOF;
	!ERROR;

%productions%

        <atom-kleene>: () -> (:ast_count);
        <atom-plus>: () -> (:ast_count);
        <atom-one>: () -> (:ast_count);
        <atom-opt>: () -> (:ast_count);

/* FIXME: rename to atom-count */
        <expr-count>: (:unsigned, :pos, :unsigned, :pos) -> (:ast_count);

	<ast-expr-empty>: () -> (:ast_expr);
	<ast-expr-literal>: (:char) -> (:ast_expr);
	<ast-expr-concat>: (:ast_expr, :ast_expr) -> (:ast_expr);
	<ast-expr-alt>: (:ast_expr, :ast_expr) -> (:ast_expr);
	!<ast-expr-any>: () -> (:ast_expr);
	!<ast-expr-re-flags>: (:re_flags, :re_flags) -> (:ast_expr);
	!<ast-expr-anchor-start>: () -> (:ast_expr);
	!<ast-expr-anchor-end>: () -> (:ast_expr);

        <ast-expr-atom>: (:ast_expr, :ast_count) -> (:ast_expr);
        <ast-expr-atom-any>: (:ast_count) -> (:ast_expr);
	<ast-expr-char-class>: (:ast_class, :pos, :pos) -> (:ast_expr);
        <ast-expr-group>: (:ast_expr) -> (:ast_expr);

	<char-class-ast-literal>: (:char) -> (:ast_class);
	!<char-class-ast-range-distinct>: (:range_endpoint, :pos, :range_endpoint, :pos) -> ();
        <char-class-ast-range>: (:range_endpoint, :pos, :range_endpoint, :pos) -> (:ast_class);
	<char-class-ast-concat>: (:ast_class, :ast_class) -> (:ast_class);
	<char-class-ast-subtract>: (:ast_class, :ast_class) -> (:ast_class);
	<char-class-ast-named-class>: (:ast_class_id) -> (:ast_class);

	<char-class-ast-flag-none>: () -> (:ast_class);
	<char-class-ast-flag-invert>: () -> (:ast_class);
	<char-class-ast-flag-minus>: () -> (:ast_class);
	<char-class-ast-flag-invert-minus>: () -> (:ast_class);

	<ast-range-endpoint-literal>: (:char) -> (:range_endpoint);
	!<ast-range-endpoint-char-class>: (:ast_class_id) -> (:range_endpoint);

	!<re-flag-none>: () -> (:re_flags);
	!<re-flag-union>: (:re_flags, :re_flags) -> (:re_flags);

	<err-expected-term>;
	!<err-expected-count>;
	!<err-expected-atoms>;
	<err-expected-alts>;
	!<err-expected-range>;
	!<err-expected-closegroup>;
	!<err-unknown-flag>;
	!<err-expected-closeflags>;
	!<err-expected-groupbody>;
	<err-expected-eof>;
	<err-unsupported>;

	!<mark-group>: (:pos, :pos) -> ();
	!<mark-range>: (:pos, :pos) -> ();
	!<mark-count>: (:pos, :pos) -> ();

	expr: () -> (node :ast_expr) [
                literal: () -> (node :ast_expr) = {
  			(c, !, !) = CHAR;
			node = <ast-expr-literal>(c);
  		};

		atom-suffix: () -> (f :ast_count) = {
			STAR;
			f = <atom-kleene>();
		||
			PLUS;
			f = <atom-plus>();
		||
			OPT;
			f = <atom-opt>();
		||
			(pos_of, pos_ot) = OPENCOUNT;
			m = COUNT;
			(pos_cf, pos_ct) = CLOSECOUNT;
			f = <expr-count>(m, pos_of, m, pos_ct);
		||
			(pos_of, pos_ot) = OPENCOUNT;
			m = COUNT;
			SEP;
			n = COUNT;
			(pos_cf, pos_ct) = CLOSECOUNT;
			f = <expr-count>(m, pos_of, n, pos_ct);
		||
			f = <atom-one>();
		};

	        /* [abc] -> when it reaches the end, make an empty class, and
		 *     each character literal / named class / etc. modifies it.
		 *     
		 * in the case of the SQL dialect's wonky [abc^def], it should
		 * create two groups, and then remove anything from the former
		 * that is in the latter.
		 *
		 * [abc] literals
		 * [a-c] range
		 * [-^] characters only allowed at the head
		 * [-] also allowed at the tail (just [-] is ambiguous)
		 * [[:NAME:]] named character classes
		 *
		 * _ is the ANY character class
		 * */
		char-class: () -> (node :ast_expr) [
			char-class-head: () -> (f :ast_class) = {
				(!) = INVERT;
				f = <char-class-ast-flag-invert>();
			||
				(!, !, !) = RANGE;
				f = <char-class-ast-flag-minus>();
			||
				(!) = INVERT;
				(!, !, !) = RANGE;
				f = <char-class-ast-flag-invert-minus>();
			||
				f = <char-class-ast-flag-none>();
			};

			char-class-tail: () -> (f :ast_class) = {
			/* This requires LL(2). */

			/* 	(!, !, !) = RANGE;
			 * 	f = <char-class-ast-flag-minus>();
			 * || */
				f = <char-class-ast-flag-none>();
			};

			named-class: () -> (id :ast_class_id) = {
                        	(id, !, !) = NAMED_CHAR_CLASS;
			};

			term: () -> (node :ast_class) = {
				(ca, start, !) = CHAR;
                                a = <ast-range-endpoint-literal>(ca);

				(!, !, !) = RANGE;

				(cz, !, end) = CHAR;
                                z = <ast-range-endpoint-literal>(cz);

				node = <char-class-ast-range>(a, start, z, end);
			||
				(c, !, !) = CHAR;
				node = <char-class-ast-literal>(c);
			||
				id = named-class();
				node = <char-class-ast-named-class>(id);
                        ##
                        	<err-expected-term>();
                                node = <char-class-ast-flag-none>();
			};
			    
			list-of-char-class-terms: () -> (node :ast_class) = {
				l = term();
				{
					r = list-of-char-class-terms();
					node = <char-class-ast-concat>(l, r);
				||
					node = l;
				};
			};
			    
			char-class-ast: () -> (node :ast_expr) = {
				(start, !) = OPENGROUP;

				head = char-class-head();
				body = list-of-char-class-terms();
				tail = char-class-tail();

				hb = <char-class-ast-concat>(head, body);
				hbt = <char-class-ast-concat>(hb, tail);
				(!, !, end) = CLOSEGROUP;
				node = <ast-expr-char-class>(hbt, start, end);
			||
				(start, !) = OPENGROUP;
				head = char-class-head();
				body = list-of-char-class-terms();
				tail = char-class-tail();
				(!) = INVERT;
				maskhead = char-class-head();
				maskbody = list-of-char-class-terms();
				masktail = char-class-tail();

				hb = <char-class-ast-concat>(head, body);
				hbt = <char-class-ast-concat>(hb, tail);
				(!, !, end) = CLOSEGROUP;

				/* Marking this unsupported for now */
                                <err-unsupported>();

				mhb = <char-class-ast-concat>(maskhead, maskbody);
				mhbt = <char-class-ast-concat>(mhb, masktail);
				masked = <char-class-ast-subtract>(hbt, mhbt);
				node = <ast-expr-char-class>(masked, start, end);
			};
		] = {
			node = char-class-ast();
		};

		/* TODO: is there a better name than 'atom' for
		 * this construct? it isn't atomic... */
		atom: () -> (node :ast_expr) = {
			OPENSUB;
			g = expr();
			e = <ast-expr-group>(g);
			CLOSESUB;
			s = atom-suffix();
			node = <ast-expr-atom>(e, s);
		||
			e = char-class();
			s = atom-suffix();
			node = <ast-expr-atom>(e, s);
		||
			e = literal();
			s = atom-suffix();
			node = <ast-expr-atom>(e, s);
		||
			ANY;
			s = atom-suffix();
			node = <ast-expr-atom-any>(s);
		||
			MANY;
			s = atom-suffix();
			f = <atom-kleene>();
			e = <ast-expr-atom-any>(f);
			node = <ast-expr-atom>(e, s);
		};

		list-of-atoms: () -> (node :ast_expr) = {
			a = atom();
			r = <ast-expr-empty>;
			node = <ast-expr-concat>(a,r);
		||
			a = atom();
			r = list-of-atoms();
			node = <ast-expr-concat>(a,r);
		};

		alt: () -> (node :ast_expr) = {
			node = list-of-atoms();
		};

		list-of-alts: () -> (node :ast_expr) = {
			a = alt();
			r = <ast-expr-empty>;
			node = <ast-expr-alt>(a,r);
		||
			a = alt();
			ALT;
			r = list-of-alts();
			node = <ast-expr-alt>(a, r);
		##
			<err-expected-alts>;
			node = <ast-expr-empty>();
		};
	] = {
		/* don't wrap a single alt in an alt chain */
		node = alt();
	||
		/* keep alts into a linked list -- every right node
		 * is either another alt or empty. */
		a = alt();
		ALT;
		r = list-of-alts();
		node = <ast-expr-alt>(a, r);
	};

	re_sql: () -> (node :ast_expr) = {
		{
			node = expr();
		||
			node = <ast-expr-empty>();
		};

		{
			EOF;
		##
			<err-expected-eof>;
		};
	};

%entry%

	re_sql;

