/*
 * Copyright 2008-2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

/*
 * ISO/IEC 9075-2:2003 (E) ©ISO/IEC
 * 8.6 <similar predicate>
 *
 * https://firebirdsql.org/refdocs/langrefupd25-similar-to.html
 *
 * TODO: SQL99/2003 permit an arbitrary optional escape character
 */

%types%

	pos;
	char;
	unsigned;
	!re_flags;
	!err;
	ast_expr;
	ast_count;
	ast_class_id;
	endpoint;

%terminals%

	ANY;
	MANY;
	OPT;
	PLUS;
	ALT;
	STAR;

	!START;
	!END;

	OPENSUB;   CLOSESUB;
	OPENGROUP:  () -> (:pos, :pos); CLOSEGROUP:  () -> (:char, :pos, :pos);
	OPENCOUNT: () -> (:pos, :pos);
	COUNT: () -> (:unsigned);
	SEP;
	CLOSECOUNT: () -> (:pos, :pos);

	INVERT: () -> (:char);
	RANGE:  () -> (:char, :pos, :pos);

	NAMED_CLASS: () -> (:ast_class_id, :pos, :pos);

	!OPENFLAGS;
	!CLOSEFLAGS;
	!NEGATE;
	!FLAG_UNKNOWN;
	!FLAG_INSENSITIVE: () -> (:re_flags);

	!ESC:     () -> (:char, :pos, :pos);
	!CONTROL: () -> (:char, :pos, :pos);
	!NOESC:   () -> (:char, :pos, :pos);
	!OCT:     () -> (:char, :pos, :pos);
	!HEX:     () -> (:char, :pos, :pos);
	CHAR:     () -> (:char, :pos, :pos);

	EOF;
	!ERROR;

%productions%

	!<re-flag-none>:  ()                     -> (:re_flags);
	!<re-flag-union>: (:re_flags, :re_flags) -> (:re_flags);

	<atom-kleene>: () -> (:ast_count);
	<atom-plus>:   () -> (:ast_count);
	<atom-one>:    () -> (:ast_count);
	<atom-opt>:    () -> (:ast_count);
	<atom-count>:  (:unsigned, :pos, :unsigned, :pos) -> (:ast_count);

	<ast-range-endpoint-literal>: (:char)         -> (:endpoint);
	!<ast-range-endpoint-class>:  (:ast_class_id) -> (:endpoint);
	!<ast-range-distinct>: (:endpoint, :pos, :endpoint, :pos) -> ();

	<ast-make-expr-empty>:         ()                       -> (:ast_expr);
	<ast-make-expr-literal>:       (:char)                  -> (:ast_expr);
	<ast-make-expr-concat>:        ()                       -> (:ast_expr);
	<ast-make-expr-alt>:           ()                       -> (:ast_expr);
	!<ast-make-expr-any>:          ()                       -> (:ast_expr);
	<ast-make-expr-atom>:          (:ast_expr, :ast_count)  -> (:ast_expr);
	<ast-make-expr-atom-any>:      (:ast_count)             -> (:ast_expr);
	<ast-make-expr-group>:         (:ast_expr)              -> (:ast_expr);
	!<ast-make-expr-re-flags>:     (:re_flags, :re_flags)   -> (:ast_expr);
	!<ast-make-expr-anchor-start>: ()                       -> (:ast_expr);
	!<ast-make-expr-anchor-end>:   ()                       -> (:ast_expr);
	<ast-make-expr-subtract>:      (:ast_expr, :ast_expr)   -> (:ast_expr);
	<ast-make-expr-invert>:        (:ast_expr)              -> (:ast_expr); 

	<ast-add-expr-concat>: (:ast_expr, :ast_expr) -> ();
	<ast-add-expr-alt>:    (:ast_expr, :ast_expr) -> ();

	<ast-make-class-range>:        (:endpoint, :pos, :endpoint, :pos) -> (:ast_expr);
	<ast-make-class-named>:        (:ast_class_id)          -> (:ast_expr);

	<err-expected-term>;
	!<err-expected-count>;
	!<err-expected-atoms>;
	<err-expected-alts>;
	!<err-expected-range>;
	<err-expected-closegroup>;
	!<err-unknown-flag>;
	!<err-expected-closeflags>;
	!<err-expected-groupbody>;
	<err-expected-eof>;
	!<err-unsupported>;

	<mark-group>: (:pos, :pos) -> ();
	<mark-range>: (:pos, :pos) -> ();
	<mark-count>: (:pos, :pos) -> ();
	<mark-expr>: (:ast_expr, :pos, :pos) -> ();

	expr: () -> (node :ast_expr) [
		literal: () -> (node :ast_expr) = {
  			(c, !, !) = CHAR;
			node = <ast-make-expr-literal>(c);
  		};

		atom-suffix: () -> (f :ast_count) = {
			STAR;
			f = <atom-kleene>();
		||
			PLUS;
			f = <atom-plus>();
		||
			OPT;
			f = <atom-opt>();
		||
			(pos_of, pos_ot) = OPENCOUNT;
			m = COUNT;
			(pos_cf, pos_ct) = CLOSECOUNT;
			<mark-count>(pos_of, pos_ct);
			f = <atom-count>(m, pos_of, m, pos_ct);
		||
			(pos_of, pos_ot) = OPENCOUNT;
			m = COUNT;
			SEP;
			n = COUNT;
			(pos_cf, pos_ct) = CLOSECOUNT;
			<mark-count>(pos_of, pos_ct);
			f = <atom-count>(m, pos_of, n, pos_ct);
		||
			f = <atom-one>();
		};

		/*
		 * [abc] -> when it reaches the end, make an empty class, and
		 * each character literal / named class / etc. modifies it.
		 *
		 * in the case of the SQL dialect's wonky [abc^def], it should
		 * create two groups, and then remove anything from the former
		 * that is in the latter.
		 *
		 * [abc] literals
		 * [a-c] range
		 * [-^] characters only allowed at the head
		 * [-] also allowed at the tail (just [-] is ambiguous)
		 * [[:NAME:]] named character classes
		 *
		 * TODO: describe [abc^xyz]
		 *
		 * _ is the ANY character class
		 */
		character-class: () -> (node :ast_expr) [

			class-head: (class :ast_expr &) -> () = {
				! = INVERT;
				&class = <ast-make-expr-invert>(class);
			||
				(c, !, !) = RANGE;
				node = <ast-make-expr-literal>(c);
				<ast-add-expr-alt>(class, node);
			||
				! = INVERT;

				(c, !, !) = RANGE;
				node = <ast-make-expr-literal>(c);
				<ast-add-expr-alt>(class, node);

				&class = <ast-make-expr-invert>(class);
			||
				$;
			};

			class-tail: (class :ast_expr) -> () = {
				/* XXX: This requires LL(2). */

			/* 	(c, !, !) = RANGE;
			 *	node = <ast-make-expr-literal>(c);
			 *  <ast-add-expr-alt>(class, node);
			 * || */
				$;
			};

			class-literal: () -> (node :ast_expr) = {
				(c, !, !) = CHAR;
				node = <ast-make-expr-literal>(c);
			};

			class-named: () -> (node :ast_expr) = {
				(id, !, !) = NAMED_CLASS;
				node = <ast-make-class-named>(id);
			};

			class-range: () -> (node :ast_expr) = {
				(ca, start, !) = CHAR;
				a = <ast-range-endpoint-literal>(ca);

				(!, !, !) = RANGE;

				(cz, !, end) = CHAR;
				z = <ast-range-endpoint-literal>(cz);

				<mark-range>(start, end);
				node = <ast-make-class-range>(a, start, z, end);
			};

			class-term: () -> (node :ast_expr) = {
				node = class-range();
			||
				node = class-literal();
			||
				node = class-named();
			};

			list-of-class-terms: (class :ast_expr) -> () = {
				{
					node = class-term();
					<ast-add-expr-alt>(class, node);
				##
					<err-expected-term>;
				};

				{
					list-of-class-terms(class);
				||
					$;
				};
			};

		] = {
			(open_start, open_end) = OPENGROUP;

			class = <ast-make-expr-alt>;
			tmp = class;

			class-head(&class);
			list-of-class-terms(tmp);
			class-tail(tmp);

			{
				(!, close_start, close_end) = CLOSEGROUP;
				<mark-group>(open_start, open_end);

				<mark-expr>(tmp, open_start, close_end);

				node = class;
			||
				/*
				 * SQL 2003 §8.6.7 I:
				 *
				 *  L( <left bracket> <character enumeration include>
				 *       <circumflex> <character enumeration exclude> <right bracket> )
				 *
				 *  is the set of all strings of length 1 (one) taken from the set
				 *  of characters in the <character enumeration include>s, except for
				 *  those strings of length 1 (one) taken from the set of characters
				 *  in the <character enumeration exclude>.
				 *
				 * We implement this by constructing a binary expression subtracting
				 * two classes expressed in the positive.
				 */

				! = INVERT;

				mask = <ast-make-expr-alt>;
				mask_tmp = mask;

				/* TODO: does the grammar allow [abc^^xyz] to invert the mask here? */

				class-head(&mask);
				list-of-class-terms(mask_tmp);
				class-tail(mask_tmp);

				{
					(!, close_start, close_end) = CLOSEGROUP;
					<mark-group>(close_start, close_end);
				##
					<err-expected-closegroup>;

					/* appease sid */
					close_start = open_end;
					close_end   = open_end;
				};

				/* TODO: would prefer to demark class and mask separately */
				<mark-expr>(tmp, open_start, close_end);
				<mark-expr>(mask_tmp, open_start, close_end);

				/* TODO: store start, end for the subtract expr */
				node = <ast-make-expr-subtract>(class, mask);
			##
				<err-expected-closegroup>;
				node = <ast-make-expr-empty>;
			};
		};

		/* TODO: is there a better name than 'atom' for
		 * this construct? it isn't atomic... */
		atom: () -> (node :ast_expr) = {
			OPENSUB;
			g = expr();
			e = <ast-make-expr-group>(g);
			CLOSESUB;
			s = atom-suffix();
			node = <ast-make-expr-atom>(e, s);
		||
			e = character-class();
			s = atom-suffix();
			node = <ast-make-expr-atom>(e, s);
		||
			e = literal();
			s = atom-suffix();
			node = <ast-make-expr-atom>(e, s);
		||
			ANY;
			s = atom-suffix();
			node = <ast-make-expr-atom-any>(s);
		||
			MANY;
			s = atom-suffix();
			f = <atom-kleene>();
			e = <ast-make-expr-atom-any>(f);
			node = <ast-make-expr-atom>(e, s);
		};

		list-of-atoms: (cat :ast_expr) -> () = {
			a = atom();

			<ast-add-expr-concat>(cat, a);

			{
				list-of-atoms(cat);
			||
				$;
			};
		};

		alt: () -> (node :ast_expr) = {
			node = <ast-make-expr-concat>;
			list-of-atoms(node);
		||
			/* explcitly allow an empty alt */
			node = <ast-make-expr-empty>;
		};

		list-of-alts: (alts :ast_expr) -> () = {
			a = alt();
			<ast-add-expr-alt>(alts, a);

			{
				ALT;

				list-of-alts(alts);
			||
				$;
			};
		##
			<err-expected-alts>;
		};

	] = {
		node = <ast-make-expr-alt>;
		list-of-alts(node);
	##
		<err-expected-alts>;
		node = <ast-make-expr-empty>;
	};

	re_sql: () -> (node :ast_expr) = {
		{
			node = expr();
		};

		{
			EOF;
		##
			<err-expected-eof>;
		};
	};

%entry%

	re_sql;

