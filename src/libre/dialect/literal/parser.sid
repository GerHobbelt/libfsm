/*
 * Copyright 2008-2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

%types%

	pos;
	char;
	!unsigned;
	!fsm;
	!fsm_state;
	!grp;
	!pred;
	!re_flags;
	!err;
	ast_expr;

%terminals%

	!ANY;
	!MANY;
	!OPT;
	!PLUS;
	!ALT;
	!SEP;
	!STAR;

	!OPENSUB;   !CLOSESUB;
	!OPENGROUP: () -> (:pos, :pos); !CLOSEGROUP: () -> (:char, :pos, :pos);
	!OPENCOUNT: () -> (:pos, :pos); !CLOSECOUNT: () -> (:pos, :pos);

	!INVERT: () -> (:char);
	!RANGE:  () -> (:char, :pos, :pos);

	!CLASS_alnum:  () -> (:fsm);
	!CLASS_alpha:  () -> (:fsm);
	!CLASS_any:    () -> (:fsm);
	!CLASS_ascii:  () -> (:fsm);
	!CLASS_blank:  () -> (:fsm);
	!CLASS_cntrl:  () -> (:fsm);
	!CLASS_digit:  () -> (:fsm);
	!CLASS_graph:  () -> (:fsm);
	!CLASS_lower:  () -> (:fsm);
	!CLASS_print:  () -> (:fsm);
	!CLASS_punct:  () -> (:fsm);
	!CLASS_space:  () -> (:fsm);
	!CLASS_spchr:  () -> (:fsm);
	!CLASS_upper:  () -> (:fsm);
	!CLASS_word:   () -> (:fsm);
	!CLASS_xdigit: () -> (:fsm);
	!CLASS_ndigit: () -> (:fsm);
	!CLASS_nspace: () -> (:fsm);

	!OPENFLAGS;
	!CLOSEFLAGS;
	!NEGATE;
	!FLAG_UNKNOWN;
	!FLAG_INSENSITIVE: () -> (:re_flags);

	!ESC:     () -> (:char, :pos, :pos);
	!CONTROL: () -> (:char, :pos, :pos);
	!NOESC:   () -> (:char, :pos, :pos);
	!OCT:     () -> (:char, :pos, :pos);
	!HEX:     () -> (:char, :pos, :pos);
	CHAR:     () -> (:char, :pos, :pos);
	!START:   () -> (:pred);
	!END:     () -> (:pred);
	!COUNT:   () -> (:unsigned);

	EOF;
	!ERROR;

%productions%

	!<make-group>: () -> (:grp);
	!<invert-group>:    (:grp &) -> ();
	!<group-add-char>:  (:grp &, :char) -> ();
	!<group-add-class>: (:grp &, :fsm) -> ();
	!<group-add-range>: (:grp &, :char, :char) -> ();
	!<group-to-states>: (:grp &, :fsm_state, :fsm_state) -> ();

	!<add-concat>:  () -> (:fsm_state);
	!<add-epsilon>: (:fsm_state, :fsm_state)        -> ();
	!<add-literal>: (:fsm_state, :fsm_state, :char) -> ();
	!<add-pred>:   (:fsm_state, :fsm_state, :pred) -> ();
	!<add-any>:    (:fsm_state, :fsm_state)        -> ();
	!<add-class>:  (:fsm_state, :fsm_state, :fsm)  -> ();

	!<count-m-to-n>: (:fsm_state, :fsm_state &, :unsigned, :unsigned) -> ();
	!<count-0-or-1>: (:fsm_state, :fsm_state) -> ();
	!<count-0-or-many>: (:fsm_state, :fsm_state &) -> ();
	!<count-1-or-many>: (:fsm_state, :fsm_state &) -> ();
	!<count-1>: (:fsm_state, :fsm_state) -> ();

	!<push-flags>;
	!<pop-flags>;
	!<set-flag>: (:re_flags) -> ();
	!<clear-flag>: (:re_flags) -> ();

	<ast-expr-empty>: () -> (:ast_expr);
	<ast-expr-literal>: (:char, :ast_expr) -> (:ast_expr);

	!<err-expected-term>;
	!<err-expected-count>;
	<err-expected-atoms>;
	!<err-expected-alts>;
	!<err-expected-range>;
	!<err-expected-closegroup>;
	!<err-unknown-flag>;
	!<err-expected-closeflags>;
	!<err-expected-groupbody>;
	<err-expected-eof>;

	!<mark-group>: (:pos, :pos) -> ();
	!<mark-range>: (:pos, :pos) -> ();
	!<mark-count>: (:pos, :pos) -> ();

	list-of-literal-nodes: () -> (n :ast_expr) [
		literal: () -> (c :char) = {
			(c, !, !) = CHAR;
		};
	] = {
		c = literal;
		{
			r = list-of-literal-nodes();
			n = <ast-expr-literal>(c, r);
		||
			r = <ast-expr-empty>();
			n = <ast-expr-literal>(c, r);
		};
	};


	re_literal: () -> (n :ast_expr) = {
		{
			n = list-of-literal-nodes();
		##
			<err-expected-atoms>;	/* TODO: inappropiate? */

			/* FIXME: shouldn't need this, but sid needs to
			 * know that this has errored out */
			n = <ast-expr-empty>();
		};
	
		{
			EOF;
		##
			<err-expected-eof>;
		};
	};

%entry%

	re_literal;

