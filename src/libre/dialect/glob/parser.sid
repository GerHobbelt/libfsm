/*
 * Copyright 2008-2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

%types%

	pos;
	char;
	!unsigned;
	!pred;
	!re_flags;
	!err;
	ast_expr;
	!ast_count;
        !ast_class_id;
	!char_class_ast;

%terminals%

	ANY;
	MANY;
	!OPT;
	!PLUS;
	!ALT;
	!SEP;
	!STAR;

	!OPENSUB;   !CLOSESUB;
	!OPENGROUP: () -> (:pos, :pos); !CLOSEGROUP: () -> (:char, :pos, :pos);
	!OPENCOUNT: () -> (:pos, :pos); !CLOSECOUNT: () -> (:pos, :pos);

	!INVERT: () -> (:char);
	!RANGE:  () -> (:char, :pos, :pos);

	!CLASS_alnum:  () -> (:ast_class_id);
	!CLASS_alpha:  () -> (:ast_class_id);
	!CLASS_any:    () -> (:ast_class_id);
	!CLASS_ascii:  () -> (:ast_class_id);
	!CLASS_blank:  () -> (:ast_class_id);
	!CLASS_cntrl:  () -> (:ast_class_id);
	!CLASS_digit:  () -> (:ast_class_id);
	!CLASS_graph:  () -> (:ast_class_id);
	!CLASS_lower:  () -> (:ast_class_id);
	!CLASS_print:  () -> (:ast_class_id);
	!CLASS_punct:  () -> (:ast_class_id);
	!CLASS_space:  () -> (:ast_class_id);
	!CLASS_spchr:  () -> (:ast_class_id);
	!CLASS_upper:  () -> (:ast_class_id);
	!CLASS_word:   () -> (:ast_class_id);
	!CLASS_xdigit: () -> (:ast_class_id);
	!CLASS_ndigit: () -> (:ast_class_id);
	!CLASS_nspace: () -> (:ast_class_id);

	!OPENFLAGS;
	!CLOSEFLAGS;
	!NEGATE;
	!FLAG_UNKNOWN;
	!FLAG_INSENSITIVE: () -> (:re_flags);

	!ESC:     () -> (:char, :pos, :pos);
	!CONTROL: () -> (:char, :pos, :pos);
	!NOESC:   () -> (:char, :pos, :pos);
	!OCT:     () -> (:char, :pos, :pos);
	!HEX:     () -> (:char, :pos, :pos);
	CHAR:     () -> (:char, :pos, :pos);
	!START:   () -> (:pred);
	!END:     () -> (:pred);
	!COUNT:   () -> (:unsigned);

	EOF;
	!ERROR;

%productions%

	!<push-flags>;
	!<pop-flags>;
	!<set-flag>: (:re_flags) -> ();
	!<clear-flag>: (:re_flags) -> ();

	<ast-expr-empty>: () -> (:ast_expr);
	<ast-expr-literal>: (:char) -> (:ast_expr);
	<ast-expr-concat>: (:ast_expr, :ast_expr) -> (:ast_expr);
	!<ast-expr-alt>: (:ast_expr, :ast_expr) -> (:ast_expr);
	<ast-expr-any>: () -> (:ast_expr);
	<ast-expr-many>: () -> (:ast_expr);

        !<ast-expr-atom>: (:ast_expr, :ast_count) -> (:ast_expr);
        !<ast-expr-atom-any>: (:ast_count) -> (:ast_expr);
        !<ast-expr-atom-many>: (:ast_count) -> (:ast_expr);
	!<ast-expr-char-class>: (:char_class_ast, :pos, :pos) -> (:ast_expr);
        !<ast-expr-group>: (:ast_expr) -> (:ast_expr);

        !<atom-kleene>: () -> (:ast_count);
        !<atom-plus>: () -> (:ast_count);
        !<atom-one>: () -> (:ast_count);
        !<atom-opt>: () -> (:ast_count);

        !<expr-count>: (:unsigned, :pos, :unsigned, :pos) -> (:ast_count);

	!<char-class-ast-literal>: (:char) -> (:char_class_ast);
        !<char-class-ast-range>: (:char, :pos, :char, :pos) -> (:char_class_ast);
	!<char-class-ast-concat>: (:char_class_ast, :char_class_ast) -> (:char_class_ast);
	!<char-class-ast-subtract>: (:char_class_ast, :char_class_ast) -> (:char_class_ast);
	!<char-class-ast-named-class>: (:ast_class_id) -> (:char_class_ast);

	!<char-class-ast-flag-none>: () -> (:char_class_ast);
	!<char-class-ast-flag-invert>: () -> (:char_class_ast);
	!<char-class-ast-flag-minus>: () -> (:char_class_ast);
	!<char-class-ast-flag-invert-minus>: () -> (:char_class_ast);

	!<err-expected-term>;
	!<err-expected-count>;
	!<err-expected-atoms>;
	!<err-expected-alts>;
	!<err-expected-range>;
	!<err-expected-closegroup>;
	!<err-unknown-flag>;
	!<err-expected-closeflags>;
	!<err-expected-groupbody>;
	<err-expected-eof>;

	!<mark-group>: (:pos, :pos) -> ();
	!<mark-range>: (:pos, :pos) -> ();
	!<mark-count>: (:pos, :pos) -> ();

	list-of-nodes: () -> (n :ast_expr) [
		literal: () -> (c :char) = {
			(c, !, !) = CHAR;
		};

		any: () -> () = {
			ANY;
		};

		many: () -> () = {
			MANY;
		};
	] = {
		{
			c = literal();
			l = <ast-expr-literal>(c);
		||
			any();
			l = <ast-expr-any>();
		||
		        many();
			l = <ast-expr-many>();
		};

		{
			r = list-of-nodes();
			n = <ast-expr-concat>(l, r);
		||
			n = l;
		};
	};

	re_glob: () -> (n :ast_expr) = {
		{
			n = list-of-nodes();
		##
			n = <ast-expr-empty>();
		};

		{
			EOF;
		##
			<err-expected-eof>;
		};
	};

%entry%

	re_glob;

