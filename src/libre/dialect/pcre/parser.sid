/*
 * Copyright 2008-2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

%types%

	pos;
	char;
	unsigned;
	fsm;
	fsm_state;
	grp;
	pred;
	re_flags;
	!err;

%terminals%

	ANY;
	!MANY;
	OPT;
	PLUS;
	ALT;
	SEP;
	STAR;

	OPENSUB; OPENCAPTURE; CLOSE;
	OPENGROUP: () -> (:pos, :pos); CLOSEGROUP: () -> (:char, :pos, :pos);
	OPENCOUNT: () -> (:pos, :pos); CLOSECOUNT: () -> (:pos, :pos);

	INVERT: () -> (:char);
	RANGE:  () -> (:char, :pos, :pos);

	!CLASS_alnum:  () -> (:fsm);
	!CLASS_alpha:  () -> (:fsm);
	!CLASS_any:    () -> (:fsm);
	!CLASS_ascii:  () -> (:fsm);
	!CLASS_blank:  () -> (:fsm);
	!CLASS_cntrl:  () -> (:fsm);
	CLASS_digit:  () -> (:fsm);
	!CLASS_graph:  () -> (:fsm);
	!CLASS_lower:  () -> (:fsm);
	!CLASS_print:  () -> (:fsm);
	!CLASS_punct:  () -> (:fsm);
	CLASS_space:  () -> (:fsm);
	!CLASS_spchr:  () -> (:fsm);
	!CLASS_upper:  () -> (:fsm);
	!CLASS_word:   () -> (:fsm);
	!CLASS_xdigit: () -> (:fsm);

	CLASS_ndigit: () -> (:fsm);
	CLASS_nspace: () -> (:fsm);

	OPENFLAGS;
	CLOSEFLAGS;
	NEGATE;
	FLAG_UNKNOWN;
	FLAG_INSENSITIVE: () -> (:re_flags);

	ESC:     () -> (:char, :pos, :pos);
	NOESC:   () -> (:char, :pos, :pos);
	CONTROL: () -> (:char, :pos, :pos);
	OCT:     () -> (:char, :pos, :pos);
	HEX:     () -> (:char, :pos, :pos);
	CHAR:    () -> (:char, :pos, :pos);
	START:   () -> (:pred);
	END:     () -> (:pred);
	COUNT:   () -> (:unsigned);

	EOF;
	!ERROR;

%productions%

	<make-group>:  () -> (:grp);
	<invert-group>:    (:grp &) -> ();
	<group-add-char>:  (:grp &, :char) -> ();
	<group-add-class>: (:grp &, :fsm) -> ();
	<group-add-range>: (:grp &, :char, :char) -> ();
	<group-to-states>: (:grp &, :fsm_state, :fsm_state) -> ();

	<add-concat>:  () -> (:fsm_state);
	<add-epsilon>: (:fsm_state, :fsm_state)        -> ();
	<add-pred>:    (:fsm_state, :fsm_state, :pred) -> ();
	<add-literal>: (:fsm_state, :fsm_state, :char) -> ();
	<add-any>:     (:fsm_state, :fsm_state)        -> ();
	<add-class>:   (:fsm_state, :fsm_state, :fsm)  -> ();

	<count-m-to-n>: (:fsm_state, :fsm_state &, :unsigned, :unsigned) -> ();
	<count-0-or-1>: (:fsm_state, :fsm_state) -> ();
	<count-0-or-many>: (:fsm_state, :fsm_state &) -> ();
	<count-1-or-many>: (:fsm_state, :fsm_state &) -> ();
	<count-1>: (:fsm_state, :fsm_state) -> ();

	<push-flags>;
	<pop-flags>;
	<set-flag>: (:re_flags) -> ();
	<clear-flag>: (:re_flags) -> ();

	<err-expected-term>;
	<err-expected-count>;
	!<err-expected-atoms>;
	<err-expected-alts>;
	<err-expected-range>;
	<err-expected-closegroup>;
	<err-expected-groupbody>;
	<err-unknown-flag>;
	<err-expected-closeflags>;
	<err-expected-eof>;

	<mark-group>: (:pos, :pos) -> ();
	<mark-range>: (:pos, :pos) -> ();
	<mark-count>: (:pos, :pos) -> ();

	pcre-class: () -> (f :fsm) = {
		f = CLASS_digit;
	||
		f = CLASS_ndigit;
	||
		f = CLASS_space;
	||
		f = CLASS_nspace;
	};

	group: (x :fsm_state, y :fsm_state) -> () [

		char: () -> (c :char) = {
			(c, !, !) = ESC;
		||
			(c, !, !) = CONTROL;
		||
			(c, !, !) = NOESC;
		||
			(c, !, !) = OCT;
		||
			(c, !, !) = HEX;
		||
			(c, !, !) = CHAR;
		};

		range: () -> (a :char, b :char) = {
			{
				(a, start, !) = ESC;
			||
				(a, start, !) = CONTROL;
			||
				(a, start, !) = NOESC;
			||
				(a, start, !) = OCT;
			||
				(a, start, !) = HEX;
			||
				(a, start, !) = CHAR;
			};

			{
				(!, !, !) = RANGE;
			##
				<err-expected-range>;
			};

			{
				(b, !, end) = ESC;
			||
				(b, !, end) = CONTROL;
			||
				(b, !, end) = OCT;
			||
				(b, !, end) = HEX;
			||
				(b, !, end) = CHAR;
			||
				(b, !, end) = RANGE;
			};

			<mark-range>(start, end);
		};

		list-of-terms: (g :grp &) -> () = {
			{
				c = char;
				<group-add-char>(&g, c);
			||
				f = pcre-class;
				<group-add-class>(&g, f);
			||
				(a, b) = range;
				<group-add-range>(&g, a, b);
			##
				<err-expected-term>;
			};

			{
				$;
			||
				list-of-terms(&g);
			};
		};

		group-body: (g :grp &) -> () = {
			{
				(c, !, !) = CLOSEGROUP;
				<group-add-char>(&g, c);
			||
				(c, !, !) = RANGE;
				<group-add-char>(&g, c);
			||
				/*
				 * XXX: this is atypical, but serves as a workaround for below
				 * until this can be done lexically by /-$/ -> $char.
				 */
				(a, !, !) = CLOSEGROUP;
				<group-add-char>(&g, a);
				(b, !, !) = RANGE;
				<group-add-char>(&g, b);
			||
				$;
			};

			list-of-terms(&g);

			{
/* XXX: this ought to be permitted, but I can't see how for LL(1)
				(c, !, !) = RANGE;
				<group-add-char>(&g, c);
			||
*/
				$;
			};
		};

		group-bm: (g :grp &) -> () = {
			(start, !) = OPENGROUP;

			{
				! = INVERT;
				group-body(&g);
				<invert-group>(&g);
			||
				group-body(&g);
			};

			{
				(!, !, end) = CLOSEGROUP;
				<mark-group>(start, end);
			##
				<err-expected-closegroup>;
			};
		##
			<err-expected-groupbody>;
		};

	] = {
		g = <make-group>;

		group-bm(&g);

		<group-to-states>(&g, x, y);
	};

	literal: (x :fsm_state, y :fsm_state) -> () = {
		{
			(c, !, !) = ESC;
		||
			(c, !, !) = CONTROL;
		||
			(c, !, !) = NOESC;
		||
			(c, !, !) = OCT;
		||
			(c, !, !) = HEX;
		||
			(c, !, !) = CHAR;
		};
		<add-literal>(x, y, c);
	};

	anchor: (x :fsm_state, y :fsm_state) -> () = {
		{
			p = START;
		||
			p = END;
		};
		<add-pred>(x, y, p);
	};

	inline-flags: () -> () [
		positive = {
			{
				c = FLAG_INSENSITIVE;
				<set-flag>(c);
			||
				FLAG_UNKNOWN;
				<err-unknown-flag>;
			};

			{
				positive;
			||
				$;
			};
		};
		negative = {
			{
				c = FLAG_INSENSITIVE;
				<clear-flag>(c);
			||
				FLAG_UNKNOWN;
				<err-unknown-flag>;
			};

			{
				negative;
			||
				$;
			};
		};
	] = {
		OPENFLAGS;

		{
			positive;
		||
			$;
		};

		{
			NEGATE;
			negative;
		||
			$;
		};

		CLOSEFLAGS;
	##
		<err-expected-closeflags>;
	};

	expr: (x :fsm_state, y :fsm_state) -> () [

		atom: (x :fsm_state, y :fsm_state &) -> () = {
			{
				{ OPENSUB; || OPENCAPTURE; };
				<push-flags>;
				expr(x, y);
				<pop-flags>;
				CLOSE;
			||
				inline-flags;
				<add-epsilon>(x, y);
			||
				group(x, y);
			||
				literal(x, y);
			||
				f = pcre-class;
				<add-class>(x, y, f);
			||
				ANY;
				<add-any>(x, y);
			};

			{
				(start, !) = OPENCOUNT;
				n = COUNT;
				(!, end) = CLOSECOUNT;
				<mark-count>(start, end);
				<count-m-to-n>(x, &y, n, n);
			||
				(start, !) = OPENCOUNT;
				m = COUNT;
				SEP;
				n = COUNT;
				(end, !) = CLOSECOUNT;
				<mark-count>(start, end);
				<count-m-to-n>(x, &y, m, n);
			||
				OPT;
				<count-0-or-1>(x, y);
			||
				STAR;
				<count-0-or-many>(x, &y);
			||
				PLUS;
				<count-1-or-many>(x, &y);
			||
				<count-1>(x, y);
			##
				<err-expected-count>;
			};
		};

		list-of-atoms: (x :fsm_state, y :fsm_state) -> () = {
			z = <add-concat>;

			{
				anchor(x, z);
			||
				atom(x, &z);
			};

			/* TODO: I don't like this. Refactor somehow? */
			{
				<add-epsilon>(z, y);
			||
				list-of-atoms(z, y);
			};
		};

		list-of-alts: (x :fsm_state, y :fsm_state) -> () [

			alt: (x :fsm_state, y :fsm_state) -> () = {
				z = <add-concat>;

				/* TODO: I don't like this. Refactor somehow? */
				<add-epsilon>(x, z);

				list-of-atoms(z, y);
			||
				<add-epsilon>(x, y);
			};

		] = {
			alt(x, y);
		||
			list-of-alts(x, y);
			ALT;
			alt(x, y);
		};

	] = {
		list-of-alts(x, y);
	};

	re_pcre: (x :fsm_state, y :fsm_state) -> () = {
		{
			expr(x, y);
		##
			<err-expected-alts>;
		};

		{
			EOF;
		##
			<err-expected-eof>;
		};
	};

%entry%

	re_pcre;

