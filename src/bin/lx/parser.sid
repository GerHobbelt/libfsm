/* $Id$ */

%types%

	string;
	re;
	zone;
	ast;

%terminals%

	pattern_regex:   () -> (:string);
	pattern_literal: () -> (:string);

	map;
	to;
	semi;
	!alt;
	token_name: () -> (:string);

	open;
	close;

	!unknown;
	eof;

%productions%

	<compile-literal>: (:string) -> (:re);
	<compile-regex>:   (:string) -> (:re);

	<concat-regex>: (:re, :re) -> (:re);

	<make-ast>:     ()                    -> (:ast);
	<make-zone>:    (:ast)                -> (:zone);
	<make-mapping>: (:zone, :re, :string) -> ();

	<no-token>: () -> (:string);

	!<free>: (:string) -> ();

	<err-syntax>;
	!<err-expected-alt>;
	<err-expected-map>;
	<err-expected-semi>;
	<err-expected-to>;
	<err-expected-open>;
	<err-expected-close>;
	<err-expected-eof>;

	<err-expected-name>;
	<err-expected-list>;


	token-mapping: (z :zone) -> () [

		pattern: () -> (r :re) = {
			s = pattern_literal;
			r = <compile-literal>(s);
		||
			s = pattern_regex;
			r = <compile-regex>(s);
		};

		concaternated-patterns: () -> (r :re) = {
			r = pattern;
		||
			a = concaternated-patterns;
			b = pattern;
			r = <concat-regex>(a, b);
		};

	] = {
		r = concaternated-patterns;

		{
			t = <no-token>;
			<make-mapping>(z, r, t);
		||
			{
				map;
			##
				<err-expected-map>;
			};

			t = token_name;
			<make-mapping>(z, r, t);
		##
			<err-expected-name>;
		};
	};

	list-of-things: (a :ast, z :zone) -> () [

		token-thing: (z :zone) -> () = {
			token-mapping(z);

			{
				semi;
			##
				<err-expected-semi>;
			};
		};

		zone-thing: (a :ast, z :zone) -> () = {
			/* TODO: have these as special zone-changing mappings */
			token-mapping(z);

			{
				to;
			##
				<err-expected-to>;
			};

			child = <make-zone>(a);

			/* TODO: have these as special zone-changing mappings */
			token-mapping(child);

			{
				{
					semi;
				##
					<err-expected-semi>;
				};
			||
				{
					open;
				##
					<err-expected-open>;
				};

				list-of-things(a, child);

				{
					close;
				##
					<err-expected-close>;
				};
			##
				<err-expected-list>;
			};
		};

		thing: (a :ast, z :zone) -> () = {
			token-thing(z);
		||
			zone-thing(a, z);
		};

	] = {
		thing(a, z);
	||
		list-of-things(a, z);
		thing(a, z);
	##
		<err-expected-list>;
	};

	lx: () -> (a :ast) = {
		a = <make-ast>;
		z = <make-zone>(a);

		list-of-things(a, z);

		{
			eof;
		##
			<err-expected-eof>;
		};
	##
		a = <make-ast>;

		<err-syntax>;
	};

%entry%

	lx;

